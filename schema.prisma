// Prisma schema for rental management system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   // 'landlord', 'manager', 'tenant', etc.
  tenants   Tenant[]
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  type      String
  image     String?
  floors    Floor[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Floor {
  id         Int      @id @default(autoincrement())
  name       String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  units      Unit[]
}

model Unit {
  id        Int      @id @default(autoincrement())
  number    String
  type      String
  rent      Int
  status    String   // 'vacant', 'occupied', 'maintenance'
  floor     Floor    @relation(fields: [floorId], references: [id])
  floorId   Int
  payments  Payment[]
  maintenanceRequests MaintenanceRequest[]
  tenants   Tenant[] // one-to-many: a unit can have many tenants over time (history)
}

model Tenant {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  moveInDate DateTime
  leaseEnd  DateTime
  status    String   // 'active', 'ending_soon', 'late', etc.
  unit      Unit?    @relation(fields: [unitId], references: [id])
  unitId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  payments  Payment[]
  maintenanceRequests MaintenanceRequest[]
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Int
  month     Int
  year      Int
  status    String   // 'completed', 'pending', 'overdue'
  date      DateTime?
  dueDate   DateTime
  method    String?
  reference String?
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  Int
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    Int
}

model MaintenanceRequest {
  id        Int      @id @default(autoincrement())
  title     String
  description String
  priority  String   // 'high', 'medium', 'low'
  status    String   // 'pending', 'in_progress', 'completed'
  dateReported DateTime
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    Int
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId  Int?
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  title     String
  message   String
  time      DateTime @default(now())
  read      Boolean  @default(false)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}
